resume_analysis_task:
  description: >
    Analyze the uploaded resume {resume} to extract key details such as:
    - Candidate's full name
    - Contact information (email, phone, LinkedIn, etc.)
    - Professional summary or objective
    - Work experience with job titles, companies, dates, and descriptions
    - Education history with degrees, institutions, and graduation dates
    - Relevant skills, frameworks, and tools
    - Notable projects, publications, or presentations
    - Accomplishments, awards, or certifications
    - Technical and soft skills
    - Any additional relevant sections (volunteer work, languages, interests, etc.)
    Summarize the extracted information in a structured format (e.g., bullet points or key-value pairs).
    Ensure all key sections are represented with relevant data.

    IMPORTANT: Use the extract_resume tool with the {resume} parameter to parse the PDF content.
    EXAMPLE: extract_resume("{resume}")
  expected_output: >
    1. A structured summary (as a list or key-value pairs) of the extracted information from the {resume}.
    2. Ensure all key sections are represented with relevant data.
    3. Successful extraction using the extract_resume tool.
    4. Confirmation message that the {resume} was parsed successfully.

    Provide the output in a clear, structured format and include all relevant details.
  agent: resume_analyst
  output_file: output/analyst_report.md
  markdown: true

job_matching_task:
  description: >
    Using the output from resume_analysis_task and the job description {jd} that is extracted using the extract_job_description tool,
    calculate a match score (0–100). Base it on how well the candidate's skills, experience, and background
    align with the job requirements. Include a brief explanation for each score.

    IMPORTANT: Use the extract_job_description tool to get the job description content.
    EXAMPLE: extract_job_description({jd})
  expected_output: >
    - Match score (0-100)
    - Summary of matched and missing criteria
    - Short rationale for the score
    - Job match expectations and recommendations

    IMPORTANT: Provide the output in a clear, structured format and include all relevant details.
  agent: matchmaker
  output_file: output/job_matching_report.md
  markdown: true
  context: [resume_analysis_task]

web_research_task:
  description: >
    Perform internet research to gather up-to-date information about:
      - Current resume formatting standards and ATS optimization best practices.
      - In-demand skills, frameworks, and tools for the candidate's target roles and industries.
      - Role-specific keywords and phrasing used in recent job postings.

    Summarize findings so they can be applied in the {resume} advising process.
  expected_output: >
    A concise research summary including:
      - Top 5–10 industry-relevant skills/technologies.
      - Recent formatting and ATS trends.
      - Common role descriptions and keywords from job postings.
      
    IMPORTANT: Provide the output in a clear, structured format and include
    3–5 actionable recommendations for improving the resume based on research.
  agent: web_researcher
  output_file: output/web_research_summary.md
  markdown: true

resume_writer_task:
  description: >
    Create an improved resume based on outputs from previous tasks, then convert it to PDF.
    
    Steps to follow:
    1. Review outputs from resume_analysis_task, job_matching_task, and web_research_task
    2. Create a comprehensive markdown-formatted resume that incorporates:
      - All candidate information from the resume analysis
      - Improvements suggested by the job matching analysis
      - Modern trends and keywords from web research
    3. Format the resume with proper markdown syntax (# for main heading, ## for sections, etc.)
    4. After creating the complete markdown resume, use the save_resume_as_pdf tool
    5. Call: save_resume_as_pdf(your_complete_markdown_content)
    
    CRITICAL: When calling save_resume_as_pdf, pass the markdown content directly as a string parameter.
    Example: save_resume_as_pdf("# John Doe\n## Software Engineer\n\n### Experience\n...")
    
    Do NOT pass objects, dictionaries, or complex data structures to the tool.
  expected_output: >
    1. A complete professional resume in markdown format that includes:
      - Header with name and contact information
      - Professional summary section
      - Work experience with quantified achievements
      - Education section
      - Skills section organized by category
      - Any additional relevant sections (certifications, projects, etc.)
      - Modern formatting that is ATS-friendly
    
    2. Successful conversion to PDF using the save_resume_as_pdf tool
    3. Confirmation message that the PDF was created successfully
  agent: resume_writer
  markdown: true
  context: [job_matching_task, web_research_task, resume_analysis_task]