resume_analysis_task:
  description: >
    Analyze the uploaded {resume} PDF or DOC file to extract key details such as:
    - Candidate's full name
    - Contact information (email, phone, LinkedIn, etc.)
    - Professional summary or objective
    - Work experience with job titles, companies, dates, and descriptions
    - Education history with degrees, institutions, and graduation dates
    - Relevant skills, frameworks, and tools
    - Notable projects, publications, or presentations
    - Accomplishments, awards, or certifications
    - Technical and soft skills
    - Any additional relevant sections (volunteer work, languages, interests, etc.)
    Summarize the extracted information in a structured format (e.g., bullet points or key-value pairs).
    Ensure all key sections are represented with relevant data.

    IMPORTANT: Use the extract_resume tool with the {resume} parameter to parse the PDF content.
    EXAMPLE: extract_resume("{resume}")
  expected_output: >
    1. A structured summary (as a list or key-value pairs) of the extracted information from the {resume}.
    2. Ensure all key sections are represented with relevant data.
    3. Successful extraction using the extract_resume tool.
    4. Confirmation message that the {resume} was parsed successfully.

    Provide the output in a clear, structured Markdown format and include all relevant details. 
  agent: resume_analyst
  output_file: output/analyst_report.md
  markdown: true

job_matching_task:
  description: >
    Using the output from resume_analysis_task and the job description {jd} that is extracted using the extract_job_description tool,
    calculate a match score (0â€“100). Base it on how well the candidate's skills, experience, and background
    align with the job requirements. Include a brief explanation for each score.

    IMPORTANT: Use the extract_job_description tool to get the job description content.
    EXAMPLE: extract_job_description({jd})
  expected_output: >
    - Match score (0-100)
    - Summary of matched and missing criteria
    - Short rationale for the score
    - Job match expectations and recommendations

    IMPORTANT: Provide the output in a clear, structured format and include all relevant details.
  agent: matchmaker
  output_file: output/job_matching_report.md
  markdown: true
  context: [resume_analysis_task]

web_research_task:
  description: >
    Perform internet research to gather up-to-date information about:
      - Current resume formatting standards and ATS optimization best practices.
      - In-demand skills, frameworks, and tools for the candidate's target roles and industries.
      - Role-specific keywords and phrasing used in recent job postings.

    Summarize findings so they can be applied in the {resume} advising process.
  expected_output: >
    A concise research summary including:
      - Top 5â€“10 industry-relevant skills/technologies.
      - Recent formatting and ATS trends.
      - Common role descriptions and keywords from job postings.
      
    IMPORTANT: Provide the output in a clear, structured format and include
    3â€“5 actionable recommendations for improving the resume based on research.
  agent: web_researcher
  output_file: output/web_research_summary.md
  markdown: true
  async_execution: true

resume_writer_task:
  description: >
    YOU MUST COMPLETE BOTH STEPS BELOW. THE TASK IS NOT COMPLETE UNTIL BOTH ARE DONE:
    
    STEP 1: Create improved markdown resume from analysis
    STEP 2: MANDATORY - Call save_resume_as_pdf tool with the markdown content
    
    CRITICAL INSTRUCTIONS:
    - You CANNOT complete this task without calling the save_resume_as_pdf tool
    - Do NOT write "I will call the tool" or "Tool has been called" - ACTUALLY CALL IT
    - The tool expects a single string parameter containing the complete markdown content
    - Do NOT provide a final response until you receive a success confirmation from the tool
    
    Process:
    1. Review all previous analysis outputs
    2. Create comprehensive markdown resume with:
       - Professional header (name, contact info)
       - Summary/objective section
       - Work experience with quantified achievements
       - Education details
       - Skills organized by category
       - Additional relevant sections
    3. IMMEDIATELY call: save_resume_as_pdf("your_complete_markdown_content_here")
    4. Wait for tool confirmation before completing
    
    TOOL USAGE EXAMPLE:
    save_resume_as_pdf("# John Smith\nSoftware Engineer\n\n## Contact\nEmail: john@email.com\n\n## Experience\n### Senior Developer\n...")
    
    FAILURE CONDITIONS - Task is INCOMPLETE if:
    - You don't call save_resume_as_pdf tool
    - You simulate calling the tool instead of actually calling it
    - You don't receive a success confirmation from the tool
  expected_output: >
    1. Complete professional markdown resume content
    2. MANDATORY: Successful execution of save_resume_as_pdf tool with confirmation message
    3. File path and size confirmation of created PDF
    4. Success message: "ðŸŽ‰ SUCCESS: PDF resume created successfully!"
    
    The task is ONLY complete when you receive the tool's success confirmation.
  agent: resume_writer
  markdown: true
  output_file: output/resume_advising_report.md
  context: [job_matching_task, web_research_task, resume_analysis_task]

# resume_writer_task:
#   description: >
#     CRITICAL: This task has TWO MANDATORY steps that you MUST complete:
    
#     STEP 1: Create an improved markdown resume
#     STEP 2: Convert it to PDF using the save_resume_as_pdf tool
    
#     IMPORTANT: You MUST use the save_resume_as_pdf tool to complete this task. 
#     Do NOT provide a final answer without calling this tool.
    
#     Detailed steps:
#     1. Review outputs from resume_analysis_task, job_matching_task, and web_research_task
#     2. Create a comprehensive markdown-formatted resume that incorporates:
#        - All candidate information from the resume analysis
#        - Improvements suggested by the job matching analysis  
#        - Modern trends and keywords from web research
#     3. Format the resume with proper markdown syntax (# for main heading, ## for sections, etc.)
#     4. MANDATORY: Use the save_resume_as_pdf tool with your complete markdown content
#     5. Call: save_resume_as_pdf("your_complete_markdown_content_here")
    
#     CRITICAL NOTES:
#     - The save_resume_as_pdf tool expects a STRING parameter containing the full markdown content
#     - Do NOT pass objects, dictionaries, or complex data structures
#     - The tool will convert your markdown to a styled PDF automatically
#     - You must wait for the tool's success confirmation before completing the task
    
#     EXAMPLE of correct tool usage:
#     save_resume_as_pdf("# John Doe\n## Software Engineer\n\n### Experience\n- Led development team...")
#   expected_output: >
#     1. A complete professional resume in markdown format that includes:
#        - Header with name and contact information
#        - Professional summary section
#        - Work experience with quantified achievements
#        - Education section
#        - Skills section organized by category
#        - Any additional relevant sections (certifications, projects, etc.)
#        - Modern formatting that is ATS-friendly
    
#     2. MANDATORY: Successful execution of the save_resume_as_pdf tool
#     3. Confirmation message from the tool that the PDF was created successfully
#     4. File path and size information of the created PDF
    
#     FAILURE CONDITIONS:
#     - If you do not use the save_resume_as_pdf tool, the task is INCOMPLETE
#     - If the tool returns an error, you must troubleshoot or report the specific error
#     - The task is only complete when you receive a success message from the PDF tool
#   agent: resume_writer
#   markdown: true
#   output_file: output/resume_advising_report.md
#   context: [job_matching_task, web_research_task, resume_analysis_task]